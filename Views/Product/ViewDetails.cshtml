@model Endterm_IPT.Models.Product
@{
    ViewData["Title"] = $"{Model.ProductName} - Gadget Shop";
    Layout = "_Layout";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

    <!-- Font Awesome for icons -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />

    <style>
        body {
            font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
            background: #f8f9fa;
            color: #222;
        }

        .product-details-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .product-details-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 8px 24px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .product-image-section {
            background: #f8f9fa;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 400px;
            position: relative;
        }

            .product-image-section img {
                max-width: 100%;
                max-height: 400px;
                object-fit: contain;
                border-radius: 8px;
            }

        .product-info-section {
            padding: 2rem;
        }

        .product-title {
            font-size: 2rem;
            font-weight: 700;
            color: #222;
            margin-bottom: 1rem;
        }

        .product-category {
            display: inline-block;
            background: rgba(226,35,26,0.1);
            color: #e2231a;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .product-price {
            font-size: 2.5rem;
            font-weight: 800;
            color: #e2231a;
            margin-bottom: 1rem;
        }

        .stock-info {
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 0.9rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            display: inline-block;
        }

        .stock-available {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .stock-low {
            background-color: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        .stock-out {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .product-description {
            font-size: 1.1rem;
            line-height: 1.6;
            color: #555;
            margin-bottom: 2rem;
        }

        .quantity-selector-section {
            margin-bottom: 2rem;
        }

        .quantity-label {
            font-weight: 600;
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
            color: #222;
        }

        .quantity-controls {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .quantity-input-group {
            display: flex;
            align-items: center;
            border: 2px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
            background: white;
        }

        .quantity-btn {
            background: #e2231a;
            color: white;
            border: none;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .quantity-btn:hover:not(:disabled) {
                background: #b21b15;
            }

            .quantity-btn:disabled {
                background: #ccc;
                cursor: not-allowed;
            }

        .quantity-input {
            border: none;
            width: 60px;
            height: 40px;
            text-align: center;
            font-size: 1.1rem;
            font-weight: 600;
            background: white;
        }

            .quantity-input:focus {
                outline: none;
            }

        .add-to-cart-section {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .btn-add-to-cart {
            background: linear-gradient(135deg, #e2231a, #b21b15);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 10px;
            transition: all 0.3s ease;
            flex: 1;
            min-width: 200px;
            justify-content: center;
        }

            .btn-add-to-cart:hover:not(:disabled) {
                transform: translateY(-2px);
                box-shadow: 0 8px 20px rgba(226,35,26,0.3);
            }

            .btn-add-to-cart:disabled {
                background: #ccc;
                cursor: not-allowed;
                transform: none;
                box-shadow: none;
            }

        .btn-back {
            background: transparent;
            color: #e2231a;
            border: 2px solid #e2231a;
            padding: 15px 30px;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 600;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 10px;
            transition: all 0.3s ease;
            min-width: 150px;
            justify-content: center;
        }

            .btn-back:hover {
                background: #e2231a;
                color: white;
                transform: translateY(-2px);
            }

        .breadcrumb-section {
            background: white;
            padding: 1rem 0;
            margin-bottom: 1rem;
            border-radius: 8px;
        }

        .breadcrumb {
            background: none;
            padding: 0;
            margin: 0;
        }

        .breadcrumb-item a {
            color: #e2231a;
            text-decoration: none;
        }

            .breadcrumb-item a:hover {
                text-decoration: underline;
            }

        .breadcrumb-item.active {
            color: #666;
        }

        /* Mobile Responsiveness */
        @@media (max-width: 768px) {
            .product-details-container

        {
            padding: 0 0.5rem;
        }

        .product-info-section {
            padding: 1.5rem;
        }

        .product-title {
            font-size: 1.5rem;
        }

        .product-price {
            font-size: 2rem;
        }

        .add-to-cart-section {
            flex-direction: column;
        }

        .btn-add-to-cart,
        .btn-back {
            min-width: 100%;
        }

        }
    </style>
</head>
<body>
    <div class="product-details-container">
        <div class="breadcrumb-section">
            <div class="container">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/">Home</a></li>
                        <li class="breadcrumb-item"><a href="/Product">Products</a></li>
                        @if (!string.IsNullOrEmpty(Model.CategoryName))
                        {
                            <li class="breadcrumb-item">@Model.CategoryName</li>
                        }
                        <li class="breadcrumb-item active" aria-current="page">@Model.ProductName</li>
                    </ol>
                </nav>
            </div>
        </div>

        <!-- Product Details Card -->
        <div class="product-details-card">
            <div class="row g-0">
                <!-- Product Image -->
                <div class="col-md-6">
                    <div class="product-image-section">
                        @if (!string.IsNullOrEmpty(Model.ImageUrl))
                        {
                            <img src="@Model.ImageUrl" alt="@Model.ProductName" />
                        }
                        else
                        {
                            <img src="@Model.ImageUrl" alt="@Model.ProductName" width="200" />
                        }
                    </div>
                </div>

                <!-- Product Information -->
                <div class="col-md-6">
                    <div class="product-info-section">
                        <h1 class="product-title">@Model.ProductName</h1>

                        @if (!string.IsNullOrEmpty(Model.CategoryName))
                        {
                            <div class="product-category">@Model.CategoryName</div>
                        }

                        <div class="product-price">₱@Model.BasePrice.ToString("N2")</div>

                        @{
                            var stockClass = Model.Stock <= 0 ? "stock-out" : Model.Stock <= 5 ? "stock-low" : "stock-available";
                            var stockText = Model.Stock <= 0 ? "Out of Stock" : Model.Stock <= 5 ? $"Only {Model.Stock} left in stock" : $"{Model.Stock} in stock";
                        }

                        <div class="stock-info @stockClass">
                            <i class="fas fa-box"></i> @stockText
                        </div>

                        <div class="product-description">
                            @Model.Description
                        </div>

                        @if (Model.Stock > 0)
                        {
                            <div class="quantity-selector-section">
                                <div class="quantity-label">Quantity:</div>
                                <div class="quantity-controls">
                                    <div class="quantity-input-group">
                                        <button type="button" class="quantity-btn" id="decreaseBtn">
                                            <i class="fas fa-minus"></i>
                                        </button>
                                        <input type="number" class="quantity-input" id="quantityInput"
                                               value="1" min="1" max="@Model.Stock" />
                                        <button type="button" class="quantity-btn" id="increaseBtn">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="add-to-cart-section">
                            @if (Model.Stock > 0)
                            {
                                <button class="btn-add-to-cart" id="addToCartBtn" onclick="addProductToCart(@Model.ProductId)">
                                    <i class="fas fa-cart-plus"></i>
                                    Add to Cart
                                </button>
                            }
                            else
                            {
                                <button class="btn-add-to-cart" disabled>
                                    <i class="fas fa-times"></i>
                                    Out of Stock
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const quantityInput = document.getElementById('quantityInput');
        const decreaseBtn = document.getElementById('decreaseBtn');
        const increaseBtn = document.getElementById('increaseBtn');
        const maxStock = @Model.Stock;

        decreaseBtn.addEventListener('click', function() {
            const currentValue = parseInt(quantityInput.value) || 1;
            if (currentValue > 1) {
                quantityInput.value = currentValue - 1;
                updateButtonStates();
            }
        });

        increaseBtn.addEventListener('click', function() {
            const currentValue = parseInt(quantityInput.value) || 1;
            if (currentValue < maxStock) {
                quantityInput.value = currentValue + 1;
                updateButtonStates();
            }
        });

        quantityInput.addEventListener('input', function() {
            let value = parseInt(this.value) || 1;
            if (value < 1) value = 1;
            if (value > maxStock) value = maxStock;
            this.value = value;
            updateButtonStates();
        });

        function updateButtonStates() {
            const currentValue = parseInt(quantityInput.value) || 1;
            decreaseBtn.disabled = currentValue <= 1;
            increaseBtn.disabled = currentValue >= maxStock;
        }

        updateButtonStates();

        function addProductToCart(productId) {
            const quantity = parseInt(quantityInput.value) || 1;
            const addButton = document.getElementById('addToCartBtn');

            addButton.disabled = true;
            addButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';

            fetch('/Cart/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                    productId: productId,
                    quantity: quantity
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification(`${quantity} item(s) added to cart successfully!`, 'success');

                    // Update cart count if available
                    if (data.cartCount !== undefined) {
                        updateCartBadge(data.cartCount);
                    }
                } else if (data.redirectToLogin) {
                    // Redirect to login page if user is not authenticated
                    window.location.href = data.redirectUrl;
                } else {
                    showNotification('Error adding product to cart: ' + data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('Error adding product to cart. Please try again.', 'error');
            })
            .finally(() => {
                // Re-enable button
                addButton.disabled = false;
                addButton.innerHTML = '<i class="fas fa-cart-plus"></i> Add to Cart';
            });
        }

        function updateCartBadge(count) {
            const cartBadge = document.getElementById('cartBadge');
            if (cartBadge) {
                cartBadge.textContent = count;
                cartBadge.style.display = count > 0 ? 'flex' : 'none';

                // Add pulse effect
                const cartIcon = document.getElementById('cartIcon');
                if (cartIcon) {
                    cartIcon.classList.add('cart-pulse');
                    setTimeout(() => cartIcon.classList.remove('cart-pulse'), 600);
                }
            }
        }

        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 15px 20px;
                border-radius: 8px;
                color: white;
                font-weight: 600;
                z-index: 10000;
                max-width: 350px;
                box-shadow: 0 8px 24px rgba(0,0,0,0.2);
                transform: translateX(100%);
                transition: transform 0.3s ease;
            `;

            notification.style.backgroundColor = type === 'success' ? '#28a745' : '#e74c3c';
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => notification.style.transform = 'translateX(0)', 100);
            setTimeout(() => {
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    if (document.body.contains(notification)) {
                        document.body.removeChild(notification);
                    }
                }, 300);
            }, 4000);
        }
    </script>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>